"use strict";
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
var _react = _interopRequireWildcard(require("react"));
var _inkdrop = require("inkdrop");
var _selectBookDialog = _interopRequireDefault(require("./select-book-dialog"));
var _path = _interopRequireDefault(require("path"));
var _progressDialog = _interopRequireDefault(require("./progress-dialog"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ImportMarkdownPlugin = () => {
  const [status, setStatus] = (0, _react.useState)('');
  const [tooLargeFiles, setTooLargeFiles] = (0, _react.useState)([]);
  const [processingFilePath, setProcessingFilePath] = (0, _react.useState)('');
  const [importError, setImportError] = (0, _react.useState)(null);
  const selectNotebookDialog = (0, _inkdrop.useModal)();
  const progressDialog = (0, _inkdrop.useModal)();
  const showDialog = (0, _react.useCallback)(() => {
    selectNotebookDialog.show();
  }, []);
  const handleNotebookSelected = (0, _react.useCallback)(async destBookId => {
    const {
      openImportDialog,
      checkSizeOfFiles,
      importMarkdownFromMultipleFilesAndDirectories
    } = require('./importer');
    const {
      filePaths
    } = await openImportDialog({
      isFolderOnly: destBookId === null
    });
    if (filePaths instanceof Array && filePaths.length > 0) {
      setStatus('Scanning files..');
      progressDialog.show();
      const [_totalSize, fileErrors] = checkSizeOfFiles(filePaths);
      if (fileErrors.length > 0) {
        setTooLargeFiles(fileErrors);
      } else {
        try {
          selectNotebookDialog.close();
          setStatus('Importing files..');
          await importMarkdownFromMultipleFilesAndDirectories(filePaths, destBookId, filePath => {
            setProcessingFilePath(filePath);
            setStatus(`Importing file.. ${_path.default.basename(filePath)}`);
          }, {
            root: true
          });
          setStatus('âœ… Importing Markdown files completed!');
          setTimeout(progressDialog.close, 2000);
        } catch (e) {
          setImportError(e);
        }
      }
    }
  }, []);
  (0, _react.useEffect)(() => {
    const sub = inkdrop.commands.add(document.body, {
      'import-markdown:import-from-file': showDialog
    });
    return () => sub.dispose();
  }, [showDialog]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_selectBookDialog.default, {
    modal: selectNotebookDialog,
    onSelect: handleNotebookSelected
  }), /*#__PURE__*/_react.default.createElement(_progressDialog.default, {
    modal: progressDialog,
    status: status,
    tooLargeFiles: tooLargeFiles,
    importingFilePath: processingFilePath,
    importError: importError
  }));
};
function activate() {
  inkdrop.components.registerClass(ImportMarkdownPlugin);
  inkdrop.layouts.addComponentToLayout('modal', 'ImportMarkdownPlugin');
}
function deactivate() {
  inkdrop.layouts.removeComponentFromLayout('modal', 'ImportMarkdownPlugin');
  inkdrop.components.deleteClass(ImportMarkdownPlugin);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,