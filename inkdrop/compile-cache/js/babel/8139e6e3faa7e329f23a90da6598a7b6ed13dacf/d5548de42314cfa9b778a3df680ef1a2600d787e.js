"use strict";
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _inkdrop = require("inkdrop");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ImportHTMLSelectNotebookDialog = _props => {
  const {
    NotebookListBar
  } = inkdrop.components.classes;
  const modal = (0, _inkdrop.useModal)();
  const {
    Dialog
  } = inkdrop.components.classes;
  const showDialog = (0, _react.useCallback)(() => {
    modal.show();
  }, []);
  const importHTMLFile = (0, _react.useCallback)(async destBookId => {
    const {
      openImportDialog,
      importHTMLFromMultipleFiles
    } = require('./importer');
    const {
      filePaths
    } = await openImportDialog();
    if (filePaths) {
      modal.close();
      await importHTMLFromMultipleFiles(filePaths, destBookId);
    } else {
      return false;
    }
  }, []);
  const handleNotebookSelect = (0, _react.useCallback)(bookId => {
    importHTMLFile(bookId);
  }, [importHTMLFile]);
  (0, _react.useEffect)(() => {
    const sub = inkdrop.commands.add(document.body, {
      'import-html:import-from-file': showDialog
    });
    return () => sub.dispose();
  }, [showDialog]);
  return /*#__PURE__*/_react.default.createElement(Dialog, _extends({}, modal.state, {
    onBackdropClick: modal.close,
    className: "import-html-select-notebook-dialog"
  }), /*#__PURE__*/_react.default.createElement(Dialog.Title, null, "Import Notes from HTML"), /*#__PURE__*/_react.default.createElement(Dialog.Content, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "ui message"
  }, "Please select a notebook"), /*#__PURE__*/_react.default.createElement("div", {
    className: "ui form"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/_react.default.createElement(NotebookListBar, {
    onItemSelect: handleNotebookSelect
  })))), /*#__PURE__*/_react.default.createElement(Dialog.Actions, {
    className: "right aligned"
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "ui button",
    onClick: modal.close
  }, "Cancel")));
};
var _default = ImportHTMLSelectNotebookDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,