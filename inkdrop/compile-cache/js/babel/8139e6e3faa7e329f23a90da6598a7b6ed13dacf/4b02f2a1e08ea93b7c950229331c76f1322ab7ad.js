"use strict";
'use babel';

const {
  lazy
} = require('react');
const {
  markdownRenderer
} = require('inkdrop');
function initMermaid() {
  const {
    mermaidAPI
  } = require('mermaid/dist/mermaid.js');
  mermaidAPI.initialize({
    startOnLoad: false,
    theme: inkdrop.config.get('mermaid.theme'),
    themeCSS: inkdrop.config.get('mermaid.themeCSS'),
    themeVariables: JSON.parse(inkdrop.config.get('mermaid.themeVariables') || '{}')
  });
}
const Mermaid = lazy(() => {
  initMermaid();
  return Promise.resolve(require('./mermaid'));
});
module.exports = {
  config: {
    autoScale: {
      title: 'Auto Scale',
      type: 'boolean',
      description: 'Automatically shrink diagrams to fit window width',
      default: true
    },
    theme: {
      title: 'Theme',
      type: 'string',
      default: 'forest',
      enum: ['default', 'forest', 'neutral', 'dark']
    },
    themeCSS: {
      title: 'Custom theme CSS',
      type: 'string',
      description: 'Example: text { font-size: 30px !important; }'
    },
    themeVariables: {
      title: 'Custom theme variables (JSON)',
      type: 'string',
      description: 'Example: { "primaryColor": "#ff0000" }',
      default: '{}'
    }
  },
  activate() {
    let isFirstCall = true;
    this.subs = inkdrop.config.observe('mermaid.theme', () => {
      if (isFirstCall) isFirstCall = false;else initMermaid();
    });
    if (markdownRenderer) {
      markdownRenderer.remarkCodeComponents.mermaid = Mermaid;
    }
  },
  deactivate() {
    this.subs.dispose();
    if (markdownRenderer) {
      markdownRenderer.remarkCodeComponents.mermaid = null;
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsYXp5IiwicmVxdWlyZSIsIm1hcmtkb3duUmVuZGVyZXIiLCJpbml0TWVybWFpZCIsIm1lcm1haWRBUEkiLCJpbml0aWFsaXplIiwic3RhcnRPbkxvYWQiLCJ0aGVtZSIsImlua2Ryb3AiLCJjb25maWciLCJnZXQiLCJ0aGVtZUNTUyIsInRoZW1lVmFyaWFibGVzIiwiSlNPTiIsInBhcnNlIiwiTWVybWFpZCIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyIsImF1dG9TY2FsZSIsInRpdGxlIiwidHlwZSIsImRlc2NyaXB0aW9uIiwiZGVmYXVsdCIsImVudW0iLCJhY3RpdmF0ZSIsImlzRmlyc3RDYWxsIiwic3VicyIsIm9ic2VydmUiLCJyZW1hcmtDb2RlQ29tcG9uZW50cyIsIm1lcm1haWQiLCJkZWFjdGl2YXRlIiwiZGlzcG9zZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmNvbnN0IHsgbGF6eSB9ID0gcmVxdWlyZSgncmVhY3QnKVxuY29uc3QgeyBtYXJrZG93blJlbmRlcmVyIH0gPSByZXF1aXJlKCdpbmtkcm9wJylcblxuZnVuY3Rpb24gaW5pdE1lcm1haWQoKSB7XG4gIGNvbnN0IHsgbWVybWFpZEFQSSB9ID0gcmVxdWlyZSgnbWVybWFpZC9kaXN0L21lcm1haWQuanMnKVxuICBtZXJtYWlkQVBJLmluaXRpYWxpemUoe1xuICAgIHN0YXJ0T25Mb2FkOiBmYWxzZSxcbiAgICB0aGVtZTogaW5rZHJvcC5jb25maWcuZ2V0KCdtZXJtYWlkLnRoZW1lJyksXG4gICAgdGhlbWVDU1M6IGlua2Ryb3AuY29uZmlnLmdldCgnbWVybWFpZC50aGVtZUNTUycpLFxuICAgIHRoZW1lVmFyaWFibGVzOiBKU09OLnBhcnNlKFxuICAgICAgaW5rZHJvcC5jb25maWcuZ2V0KCdtZXJtYWlkLnRoZW1lVmFyaWFibGVzJykgfHwgJ3t9J1xuICAgIClcbiAgfSlcbn1cblxuY29uc3QgTWVybWFpZCA9IGxhenkoKCkgPT4ge1xuICBpbml0TWVybWFpZCgpXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxdWlyZSgnLi9tZXJtYWlkJykpXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29uZmlnOiB7XG4gICAgYXV0b1NjYWxlOiB7XG4gICAgICB0aXRsZTogJ0F1dG8gU2NhbGUnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzY3JpcHRpb246ICdBdXRvbWF0aWNhbGx5IHNocmluayBkaWFncmFtcyB0byBmaXQgd2luZG93IHdpZHRoJyxcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHRoZW1lOiB7XG4gICAgICB0aXRsZTogJ1RoZW1lJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVmYXVsdDogJ2ZvcmVzdCcsXG4gICAgICBlbnVtOiBbJ2RlZmF1bHQnLCAnZm9yZXN0JywgJ25ldXRyYWwnLCAnZGFyayddXG4gICAgfSxcbiAgICB0aGVtZUNTUzoge1xuICAgICAgdGl0bGU6ICdDdXN0b20gdGhlbWUgQ1NTJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246ICdFeGFtcGxlOiB0ZXh0IHsgZm9udC1zaXplOiAzMHB4ICFpbXBvcnRhbnQ7IH0nXG4gICAgfSxcbiAgICB0aGVtZVZhcmlhYmxlczoge1xuICAgICAgdGl0bGU6ICdDdXN0b20gdGhlbWUgdmFyaWFibGVzIChKU09OKScsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRXhhbXBsZTogeyBcInByaW1hcnlDb2xvclwiOiBcIiNmZjAwMDBcIiB9JyxcbiAgICAgIGRlZmF1bHQ6ICd7fSdcbiAgICB9XG4gIH0sXG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgbGV0IGlzRmlyc3RDYWxsID0gdHJ1ZVxuICAgIHRoaXMuc3VicyA9IGlua2Ryb3AuY29uZmlnLm9ic2VydmUoJ21lcm1haWQudGhlbWUnLCAoKSA9PiB7XG4gICAgICBpZiAoaXNGaXJzdENhbGwpIGlzRmlyc3RDYWxsID0gZmFsc2VcbiAgICAgIGVsc2UgaW5pdE1lcm1haWQoKVxuICAgIH0pXG5cbiAgICBpZiAobWFya2Rvd25SZW5kZXJlcikge1xuICAgICAgbWFya2Rvd25SZW5kZXJlci5yZW1hcmtDb2RlQ29tcG9uZW50cy5tZXJtYWlkID0gTWVybWFpZFxuICAgIH1cbiAgfSxcblxuICBkZWFjdGl2YXRlKCkge1xuICAgIHRoaXMuc3Vicy5kaXNwb3NlKClcblxuICAgIGlmIChtYXJrZG93blJlbmRlcmVyKSB7XG4gICAgICBtYXJrZG93blJlbmRlcmVyLnJlbWFya0NvZGVDb21wb25lbnRzLm1lcm1haWQgPSBudWxsXG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxXQUFXOztBQUVYLE1BQU07RUFBRUE7QUFBSyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDakMsTUFBTTtFQUFFQztBQUFpQixDQUFDLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0MsU0FBU0UsV0FBV0EsQ0FBQSxFQUFHO0VBQ3JCLE1BQU07SUFBRUM7RUFBVyxDQUFDLEdBQUdILE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztFQUN6REcsVUFBVSxDQUFDQyxVQUFVLENBQUM7SUFDcEJDLFdBQVcsRUFBRSxLQUFLO0lBQ2xCQyxLQUFLLEVBQUVDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBQzFDQyxRQUFRLEVBQUVILE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7SUFDaERFLGNBQWMsRUFBRUMsSUFBSSxDQUFDQyxLQUFLLENBQ3hCTixPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksSUFDbEQ7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBLE1BQU1LLE9BQU8sR0FBR2YsSUFBSSxDQUFDLE1BQU07RUFDekJHLFdBQVcsQ0FBQyxDQUFDO0VBQ2IsT0FBT2EsT0FBTyxDQUFDQyxPQUFPLENBQUNoQixPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFDO0FBRUZpQixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmVixNQUFNLEVBQUU7SUFDTlcsU0FBUyxFQUFFO01BQ1RDLEtBQUssRUFBRSxZQUFZO01BQ25CQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxXQUFXLEVBQUUsbURBQW1EO01BQ2hFQyxPQUFPLEVBQUU7SUFDWCxDQUFDO0lBQ0RqQixLQUFLLEVBQUU7TUFDTGMsS0FBSyxFQUFFLE9BQU87TUFDZEMsSUFBSSxFQUFFLFFBQVE7TUFDZEUsT0FBTyxFQUFFLFFBQVE7TUFDakJDLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU07SUFDL0MsQ0FBQztJQUNEZCxRQUFRLEVBQUU7TUFDUlUsS0FBSyxFQUFFLGtCQUFrQjtNQUN6QkMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEWCxjQUFjLEVBQUU7TUFDZFMsS0FBSyxFQUFFLCtCQUErQjtNQUN0Q0MsSUFBSSxFQUFFLFFBQVE7TUFDZEMsV0FBVyxFQUFFLHdDQUF3QztNQUNyREMsT0FBTyxFQUFFO0lBQ1g7RUFDRixDQUFDO0VBRURFLFFBQVFBLENBQUEsRUFBRztJQUNULElBQUlDLFdBQVcsR0FBRyxJQUFJO0lBQ3RCLElBQUksQ0FBQ0MsSUFBSSxHQUFHcEIsT0FBTyxDQUFDQyxNQUFNLENBQUNvQixPQUFPLENBQUMsZUFBZSxFQUFFLE1BQU07TUFDeEQsSUFBSUYsV0FBVyxFQUFFQSxXQUFXLEdBQUcsS0FBSyxNQUMvQnhCLFdBQVcsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsQ0FBQztJQUVGLElBQUlELGdCQUFnQixFQUFFO01BQ3BCQSxnQkFBZ0IsQ0FBQzRCLG9CQUFvQixDQUFDQyxPQUFPLEdBQUdoQixPQUFPO0lBQ3pEO0VBQ0YsQ0FBQztFQUVEaUIsVUFBVUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxDQUFDSixJQUFJLENBQUNLLE9BQU8sQ0FBQyxDQUFDO0lBRW5CLElBQUkvQixnQkFBZ0IsRUFBRTtNQUNwQkEsZ0JBQWdCLENBQUM0QixvQkFBb0IsQ0FBQ0MsT0FBTyxHQUFHLElBQUk7SUFDdEQ7RUFDRjtBQUNGLENBQUMifQ==